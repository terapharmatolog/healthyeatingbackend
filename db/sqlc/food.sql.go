// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: food.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFood = `-- name: CreateFood :one
INSERT INTO
    foods (product_name,calories,fats,
    proteins,carbohydrates, fiber, water, vitamin_A, beta_carotene,alpha_carotene,vitamin_D, vitamin_D3, vitamin_E,vitamin_K,vitamin_C,vitamin_B1,vitamin_B2,vitamin_B3,vitamin_B4,vitamin_B5,vitamin_B6,vitamin_B9,vitamin_B12,calcium,iron,magnesium,phosphorus,potassium,sodium,zinc,copper, manganese,selenium,fluorine )    
VALUES
    (
        $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34
    ) RETURNING id, product_name, calories, fats, proteins, carbohydrates, fiber, water, vitamin_a, beta_carotene, alpha_carotene, vitamin_d, vitamin_d3, vitamin_e, vitamin_k, vitamin_c, vitamin_b1, vitamin_b2, vitamin_b3, vitamin_b4, vitamin_b5, vitamin_b6, vitamin_b9, vitamin_b12, calcium, iron, magnesium, phosphorus, potassium, sodium, zinc, copper, manganese, selenium, fluorine, created_at
`

type CreateFoodParams struct {
	ProductName   string
	Calories      int32
	Fats          pgtype.Numeric
	Proteins      pgtype.Numeric
	Carbohydrates pgtype.Numeric
	Fiber         pgtype.Numeric
	Water         pgtype.Numeric
	VitaminA      pgtype.Numeric
	BetaCarotene  pgtype.Numeric
	AlphaCarotene pgtype.Numeric
	VitaminD      pgtype.Numeric
	VitaminD3     pgtype.Numeric
	VitaminE      pgtype.Numeric
	VitaminK      pgtype.Numeric
	VitaminC      pgtype.Numeric
	VitaminB1     pgtype.Numeric
	VitaminB2     pgtype.Numeric
	VitaminB3     pgtype.Numeric
	VitaminB4     pgtype.Numeric
	VitaminB5     pgtype.Numeric
	VitaminB6     pgtype.Numeric
	VitaminB9     pgtype.Numeric
	VitaminB12    pgtype.Numeric
	Calcium       pgtype.Numeric
	Iron          pgtype.Numeric
	Magnesium     pgtype.Numeric
	Phosphorus    pgtype.Numeric
	Potassium     pgtype.Numeric
	Sodium        pgtype.Numeric
	Zinc          pgtype.Numeric
	Copper        pgtype.Numeric
	Manganese     pgtype.Numeric
	Selenium      pgtype.Numeric
	Fluorine      pgtype.Numeric
}

func (q *Queries) CreateFood(ctx context.Context, arg CreateFoodParams) (Food, error) {
	row := q.db.QueryRow(ctx, createFood,
		arg.ProductName,
		arg.Calories,
		arg.Fats,
		arg.Proteins,
		arg.Carbohydrates,
		arg.Fiber,
		arg.Water,
		arg.VitaminA,
		arg.BetaCarotene,
		arg.AlphaCarotene,
		arg.VitaminD,
		arg.VitaminD3,
		arg.VitaminE,
		arg.VitaminK,
		arg.VitaminC,
		arg.VitaminB1,
		arg.VitaminB2,
		arg.VitaminB3,
		arg.VitaminB4,
		arg.VitaminB5,
		arg.VitaminB6,
		arg.VitaminB9,
		arg.VitaminB12,
		arg.Calcium,
		arg.Iron,
		arg.Magnesium,
		arg.Phosphorus,
		arg.Potassium,
		arg.Sodium,
		arg.Zinc,
		arg.Copper,
		arg.Manganese,
		arg.Selenium,
		arg.Fluorine,
	)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Calories,
		&i.Fats,
		&i.Proteins,
		&i.Carbohydrates,
		&i.Fiber,
		&i.Water,
		&i.VitaminA,
		&i.BetaCarotene,
		&i.AlphaCarotene,
		&i.VitaminD,
		&i.VitaminD3,
		&i.VitaminE,
		&i.VitaminK,
		&i.VitaminC,
		&i.VitaminB1,
		&i.VitaminB2,
		&i.VitaminB3,
		&i.VitaminB4,
		&i.VitaminB5,
		&i.VitaminB6,
		&i.VitaminB9,
		&i.VitaminB12,
		&i.Calcium,
		&i.Iron,
		&i.Magnesium,
		&i.Phosphorus,
		&i.Potassium,
		&i.Sodium,
		&i.Zinc,
		&i.Copper,
		&i.Manganese,
		&i.Selenium,
		&i.Fluorine,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFood = `-- name: DeleteFood :exec
DELETE FROM foods WHERE id = $1
`

func (q *Queries) DeleteFood(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFood, id)
	return err
}

const getFood = `-- name: GetFood :one
SELECT id, product_name, calories, fats, proteins, carbohydrates, fiber, water, vitamin_a, beta_carotene, alpha_carotene, vitamin_d, vitamin_d3, vitamin_e, vitamin_k, vitamin_c, vitamin_b1, vitamin_b2, vitamin_b3, vitamin_b4, vitamin_b5, vitamin_b6, vitamin_b9, vitamin_b12, calcium, iron, magnesium, phosphorus, potassium, sodium, zinc, copper, manganese, selenium, fluorine, created_at FROM foods
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFood(ctx context.Context, id int32) (Food, error) {
	row := q.db.QueryRow(ctx, getFood, id)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Calories,
		&i.Fats,
		&i.Proteins,
		&i.Carbohydrates,
		&i.Fiber,
		&i.Water,
		&i.VitaminA,
		&i.BetaCarotene,
		&i.AlphaCarotene,
		&i.VitaminD,
		&i.VitaminD3,
		&i.VitaminE,
		&i.VitaminK,
		&i.VitaminC,
		&i.VitaminB1,
		&i.VitaminB2,
		&i.VitaminB3,
		&i.VitaminB4,
		&i.VitaminB5,
		&i.VitaminB6,
		&i.VitaminB9,
		&i.VitaminB12,
		&i.Calcium,
		&i.Iron,
		&i.Magnesium,
		&i.Phosphorus,
		&i.Potassium,
		&i.Sodium,
		&i.Zinc,
		&i.Copper,
		&i.Manganese,
		&i.Selenium,
		&i.Fluorine,
		&i.CreatedAt,
	)
	return i, err
}

const listFood = `-- name: ListFood :many
SELECT id, product_name, calories, fats, proteins, carbohydrates, fiber, water, vitamin_a, beta_carotene, alpha_carotene, vitamin_d, vitamin_d3, vitamin_e, vitamin_k, vitamin_c, vitamin_b1, vitamin_b2, vitamin_b3, vitamin_b4, vitamin_b5, vitamin_b6, vitamin_b9, vitamin_b12, calcium, iron, magnesium, phosphorus, potassium, sodium, zinc, copper, manganese, selenium, fluorine, created_at FROM foods
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListFoodParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListFood(ctx context.Context, arg ListFoodParams) ([]Food, error) {
	rows, err := q.db.Query(ctx, listFood, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Food
	for rows.Next() {
		var i Food
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Calories,
			&i.Fats,
			&i.Proteins,
			&i.Carbohydrates,
			&i.Fiber,
			&i.Water,
			&i.VitaminA,
			&i.BetaCarotene,
			&i.AlphaCarotene,
			&i.VitaminD,
			&i.VitaminD3,
			&i.VitaminE,
			&i.VitaminK,
			&i.VitaminC,
			&i.VitaminB1,
			&i.VitaminB2,
			&i.VitaminB3,
			&i.VitaminB4,
			&i.VitaminB5,
			&i.VitaminB6,
			&i.VitaminB9,
			&i.VitaminB12,
			&i.Calcium,
			&i.Iron,
			&i.Magnesium,
			&i.Phosphorus,
			&i.Potassium,
			&i.Sodium,
			&i.Zinc,
			&i.Copper,
			&i.Manganese,
			&i.Selenium,
			&i.Fluorine,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFood = `-- name: UpdateFood :exec
UPDATE foods SET product_name = $2
WHERE id = $1
`

type UpdateFoodParams struct {
	ID          int32
	ProductName string
}

func (q *Queries) UpdateFood(ctx context.Context, arg UpdateFoodParams) error {
	_, err := q.db.Exec(ctx, updateFood, arg.ID, arg.ProductName)
	return err
}
